/*
 * This file is generated by jOOQ.
*/
package fi.alekster.classical.db.tables.daos;


import fi.alekster.classical.db.tables.Credential;
import fi.alekster.classical.db.tables.records.CredentialRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CredentialDao extends DAOImpl<CredentialRecord, fi.alekster.classical.db.tables.pojos.Credential, String> {

    /**
     * Create a new CredentialDao without any configuration
     */
    public CredentialDao() {
        super(Credential.CREDENTIAL, fi.alekster.classical.db.tables.pojos.Credential.class);
    }

    /**
     * Create a new CredentialDao with an attached configuration
     */
    public CredentialDao(Configuration configuration) {
        super(Credential.CREDENTIAL, fi.alekster.classical.db.tables.pojos.Credential.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(fi.alekster.classical.db.tables.pojos.Credential object) {
        return object.getEmail();
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Credential> fetchByEmail(String... values) {
        return fetch(Credential.CREDENTIAL.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public fi.alekster.classical.db.tables.pojos.Credential fetchOneByEmail(String value) {
        return fetchOne(Credential.CREDENTIAL.EMAIL, value);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Credential> fetchByPassword(String... values) {
        return fetch(Credential.CREDENTIAL.PASSWORD, values);
    }
}
