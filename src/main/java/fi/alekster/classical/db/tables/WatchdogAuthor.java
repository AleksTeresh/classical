/*
 * This file is generated by jOOQ.
*/
package fi.alekster.classical.db.tables;


import fi.alekster.classical.db.Keys;
import fi.alekster.classical.db.Public;
import fi.alekster.classical.db.tables.records.WatchdogAuthorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WatchdogAuthor extends TableImpl<WatchdogAuthorRecord> {

    private static final long serialVersionUID = 1916698773;

    /**
     * The reference instance of <code>public.watchdog_author</code>
     */
    public static final WatchdogAuthor WATCHDOG_AUTHOR = new WatchdogAuthor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WatchdogAuthorRecord> getRecordType() {
        return WatchdogAuthorRecord.class;
    }

    /**
     * The column <code>public.watchdog_author.watchdog_id</code>.
     */
    public final TableField<WatchdogAuthorRecord, Long> WATCHDOG_ID = createField("watchdog_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.watchdog_author.author_id</code>.
     */
    public final TableField<WatchdogAuthorRecord, Long> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.watchdog_author</code> table reference
     */
    public WatchdogAuthor() {
        this("watchdog_author", null);
    }

    /**
     * Create an aliased <code>public.watchdog_author</code> table reference
     */
    public WatchdogAuthor(String alias) {
        this(alias, WATCHDOG_AUTHOR);
    }

    private WatchdogAuthor(String alias, Table<WatchdogAuthorRecord> aliased) {
        this(alias, aliased, null);
    }

    private WatchdogAuthor(String alias, Table<WatchdogAuthorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WatchdogAuthorRecord> getPrimaryKey() {
        return Keys.PK_WATCHDOG_AUTHOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WatchdogAuthorRecord>> getKeys() {
        return Arrays.<UniqueKey<WatchdogAuthorRecord>>asList(Keys.PK_WATCHDOG_AUTHOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<WatchdogAuthorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WatchdogAuthorRecord, ?>>asList(Keys.WATCHDOG_AUTHOR__FK_WATCHDOG_AUTHOR_WATCHDOG, Keys.WATCHDOG_AUTHOR__FK_WATCHDOG_AUTHOR_AUTHOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WatchdogAuthor as(String alias) {
        return new WatchdogAuthor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WatchdogAuthor rename(String name) {
        return new WatchdogAuthor(name, null);
    }
}
