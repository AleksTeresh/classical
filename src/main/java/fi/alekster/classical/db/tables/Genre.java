/*
 * This file is generated by jOOQ.
*/
package fi.alekster.classical.db.tables;


import fi.alekster.classical.db.Keys;
import fi.alekster.classical.db.Public;
import fi.alekster.classical.db.tables.records.GenreRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Genre extends TableImpl<GenreRecord> {

    private static final long serialVersionUID = 1475857547;

    /**
     * The reference instance of <code>public.genre</code>
     */
    public static final Genre GENRE = new Genre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenreRecord> getRecordType() {
        return GenreRecord.class;
    }

    /**
     * The column <code>public.genre.id</code>.
     */
    public final TableField<GenreRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('genre_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.genre.name</code>.
     */
    public final TableField<GenreRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>public.genre</code> table reference
     */
    public Genre() {
        this("genre", null);
    }

    /**
     * Create an aliased <code>public.genre</code> table reference
     */
    public Genre(String alias) {
        this(alias, GENRE);
    }

    private Genre(String alias, Table<GenreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Genre(String alias, Table<GenreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GenreRecord, Long> getIdentity() {
        return Keys.IDENTITY_GENRE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GenreRecord> getPrimaryKey() {
        return Keys.PK_GENRE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GenreRecord>> getKeys() {
        return Arrays.<UniqueKey<GenreRecord>>asList(Keys.PK_GENRE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Genre as(String alias) {
        return new Genre(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Genre rename(String name) {
        return new Genre(name, null);
    }
}
