/*
 * This file is generated by jOOQ.
*/
package fi.alekster.classical.db.tables.daos;


import fi.alekster.classical.db.tables.Gig;
import fi.alekster.classical.db.tables.records.GigRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GigDao extends DAOImpl<GigRecord, fi.alekster.classical.db.tables.pojos.Gig, Long> {

    /**
     * Create a new GigDao without any configuration
     */
    public GigDao() {
        super(Gig.GIG, fi.alekster.classical.db.tables.pojos.Gig.class);
    }

    /**
     * Create a new GigDao with an attached configuration
     */
    public GigDao(Configuration configuration) {
        super(Gig.GIG, fi.alekster.classical.db.tables.pojos.Gig.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(fi.alekster.classical.db.tables.pojos.Gig object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchById(Long... values) {
        return fetch(Gig.GIG.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public fi.alekster.classical.db.tables.pojos.Gig fetchOneById(Long value) {
        return fetchOne(Gig.GIG.ID, value);
    }

    /**
     * Fetch records that have <code>venue_id IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchByVenueId(Long... values) {
        return fetch(Gig.GIG.VENUE_ID, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchByName(String... values) {
        return fetch(Gig.GIG.NAME, values);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchByDescription(String... values) {
        return fetch(Gig.GIG.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>timestamp IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchByTimestamp(Timestamp... values) {
        return fetch(Gig.GIG.TIMESTAMP, values);
    }

    /**
     * Fetch records that have <code>duration IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchByDuration(Long... values) {
        return fetch(Gig.GIG.DURATION, values);
    }

    /**
     * Fetch records that have <code>image_url IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchByImageUrl(String... values) {
        return fetch(Gig.GIG.IMAGE_URL, values);
    }

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchByUrl(String... values) {
        return fetch(Gig.GIG.URL, values);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<fi.alekster.classical.db.tables.pojos.Gig> fetchByCreateTime(Timestamp... values) {
        return fetch(Gig.GIG.CREATE_TIME, values);
    }
}
