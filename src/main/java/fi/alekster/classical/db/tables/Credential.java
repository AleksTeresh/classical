/*
 * This file is generated by jOOQ.
*/
package fi.alekster.classical.db.tables;


import fi.alekster.classical.db.Keys;
import fi.alekster.classical.db.Public;
import fi.alekster.classical.db.tables.records.CredentialRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Credential extends TableImpl<CredentialRecord> {

    private static final long serialVersionUID = 832016103;

    /**
     * The reference instance of <code>public.credential</code>
     */
    public static final Credential CREDENTIAL = new Credential();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CredentialRecord> getRecordType() {
        return CredentialRecord.class;
    }

    /**
     * The column <code>public.credential.email</code>.
     */
    public final TableField<CredentialRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.credential.password</code>.
     */
    public final TableField<CredentialRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>public.credential</code> table reference
     */
    public Credential() {
        this("credential", null);
    }

    /**
     * Create an aliased <code>public.credential</code> table reference
     */
    public Credential(String alias) {
        this(alias, CREDENTIAL);
    }

    private Credential(String alias, Table<CredentialRecord> aliased) {
        this(alias, aliased, null);
    }

    private Credential(String alias, Table<CredentialRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CredentialRecord> getPrimaryKey() {
        return Keys.PK_CREDENTIAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CredentialRecord>> getKeys() {
        return Arrays.<UniqueKey<CredentialRecord>>asList(Keys.PK_CREDENTIAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Credential as(String alias) {
        return new Credential(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Credential rename(String name) {
        return new Credential(name, null);
    }
}
