/*
 * This file is generated by jOOQ.
*/
package fi.alekster.classical.db.tables;


import fi.alekster.classical.db.Keys;
import fi.alekster.classical.db.Public;
import fi.alekster.classical.db.tables.records.PerformanceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Performance extends TableImpl<PerformanceRecord> {

    private static final long serialVersionUID = 1753595702;

    /**
     * The reference instance of <code>public.performance</code>
     */
    public static final Performance PERFORMANCE = new Performance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PerformanceRecord> getRecordType() {
        return PerformanceRecord.class;
    }

    /**
     * The column <code>public.performance.id</code>.
     */
    public final TableField<PerformanceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('performance_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.performance.author_id</code>.
     */
    public final TableField<PerformanceRecord, Long> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.performance.gig_id</code>.
     */
    public final TableField<PerformanceRecord, Long> GIG_ID = createField("gig_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.performance.name</code>.
     */
    public final TableField<PerformanceRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.performance.description</code>.
     */
    public final TableField<PerformanceRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(700), this, "");

    /**
     * Create a <code>public.performance</code> table reference
     */
    public Performance() {
        this("performance", null);
    }

    /**
     * Create an aliased <code>public.performance</code> table reference
     */
    public Performance(String alias) {
        this(alias, PERFORMANCE);
    }

    private Performance(String alias, Table<PerformanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Performance(String alias, Table<PerformanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PerformanceRecord, Long> getIdentity() {
        return Keys.IDENTITY_PERFORMANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PerformanceRecord> getPrimaryKey() {
        return Keys.PK_PERFORMANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PerformanceRecord>> getKeys() {
        return Arrays.<UniqueKey<PerformanceRecord>>asList(Keys.PK_PERFORMANCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PerformanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PerformanceRecord, ?>>asList(Keys.PERFORMANCE__FK_PERFORMANCE_AUTHOR, Keys.PERFORMANCE__FK_PERFORMANCE_GIG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Performance as(String alias) {
        return new Performance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Performance rename(String name) {
        return new Performance(name, null);
    }
}
