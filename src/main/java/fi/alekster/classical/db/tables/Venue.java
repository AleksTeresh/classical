/*
 * This file is generated by jOOQ.
*/
package fi.alekster.classical.db.tables;


import fi.alekster.classical.db.Keys;
import fi.alekster.classical.db.Public;
import fi.alekster.classical.db.tables.records.VenueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Venue extends TableImpl<VenueRecord> {

    private static final long serialVersionUID = -1463027226;

    /**
     * The reference instance of <code>public.venue</code>
     */
    public static final Venue VENUE = new Venue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VenueRecord> getRecordType() {
        return VenueRecord.class;
    }

    /**
     * The column <code>public.venue.id</code>.
     */
    public final TableField<VenueRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('venue_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.venue.name</code>.
     */
    public final TableField<VenueRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.venue.description</code>.
     */
    public final TableField<VenueRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(700), this, "");

    /**
     * Create a <code>public.venue</code> table reference
     */
    public Venue() {
        this("venue", null);
    }

    /**
     * Create an aliased <code>public.venue</code> table reference
     */
    public Venue(String alias) {
        this(alias, VENUE);
    }

    private Venue(String alias, Table<VenueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Venue(String alias, Table<VenueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VenueRecord, Long> getIdentity() {
        return Keys.IDENTITY_VENUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VenueRecord> getPrimaryKey() {
        return Keys.PK_VENUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VenueRecord>> getKeys() {
        return Arrays.<UniqueKey<VenueRecord>>asList(Keys.PK_VENUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Venue as(String alias) {
        return new Venue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Venue rename(String name) {
        return new Venue(name, null);
    }
}
