/*
 * This file is generated by jOOQ.
*/
package fi.alekster.classical.db;


import fi.alekster.classical.db.tables.Author;
import fi.alekster.classical.db.tables.Databasechangeloglock;
import fi.alekster.classical.db.tables.Genre;
import fi.alekster.classical.db.tables.Gig;
import fi.alekster.classical.db.tables.Performance;
import fi.alekster.classical.db.tables.PerformanceGenre;
import fi.alekster.classical.db.tables.Venue;
import fi.alekster.classical.db.tables.records.AuthorRecord;
import fi.alekster.classical.db.tables.records.DatabasechangeloglockRecord;
import fi.alekster.classical.db.tables.records.GenreRecord;
import fi.alekster.classical.db.tables.records.GigRecord;
import fi.alekster.classical.db.tables.records.PerformanceGenreRecord;
import fi.alekster.classical.db.tables.records.PerformanceRecord;
import fi.alekster.classical.db.tables.records.VenueRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>public</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AuthorRecord, Long> IDENTITY_AUTHOR = Identities0.IDENTITY_AUTHOR;
    public static final Identity<GenreRecord, Long> IDENTITY_GENRE = Identities0.IDENTITY_GENRE;
    public static final Identity<GigRecord, Long> IDENTITY_GIG = Identities0.IDENTITY_GIG;
    public static final Identity<PerformanceRecord, Long> IDENTITY_PERFORMANCE = Identities0.IDENTITY_PERFORMANCE;
    public static final Identity<VenueRecord, Long> IDENTITY_VENUE = Identities0.IDENTITY_VENUE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> PK_AUTHOR = UniqueKeys0.PK_AUTHOR;
    public static final UniqueKey<DatabasechangeloglockRecord> PK_DATABASECHANGELOGLOCK = UniqueKeys0.PK_DATABASECHANGELOGLOCK;
    public static final UniqueKey<GenreRecord> PK_GENRE = UniqueKeys0.PK_GENRE;
    public static final UniqueKey<GigRecord> PK_GIG = UniqueKeys0.PK_GIG;
    public static final UniqueKey<PerformanceRecord> PK_PERFORMANCE = UniqueKeys0.PK_PERFORMANCE;
    public static final UniqueKey<PerformanceGenreRecord> PK_PERFORMANCE_GENRE = UniqueKeys0.PK_PERFORMANCE_GENRE;
    public static final UniqueKey<VenueRecord> PK_VENUE = UniqueKeys0.PK_VENUE;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<GigRecord, VenueRecord> GIG__FK_GIG_VENUE = ForeignKeys0.GIG__FK_GIG_VENUE;
    public static final ForeignKey<PerformanceRecord, AuthorRecord> PERFORMANCE__FK_PERFORMANCE_AUTHOR = ForeignKeys0.PERFORMANCE__FK_PERFORMANCE_AUTHOR;
    public static final ForeignKey<PerformanceRecord, GigRecord> PERFORMANCE__FK_PERFORMANCE_GIG = ForeignKeys0.PERFORMANCE__FK_PERFORMANCE_GIG;
    public static final ForeignKey<PerformanceGenreRecord, PerformanceRecord> PERFORMANCE_GENRE__FK_PERFORMANCE_GENRE_PERFORMANCE = ForeignKeys0.PERFORMANCE_GENRE__FK_PERFORMANCE_GENRE_PERFORMANCE;
    public static final ForeignKey<PerformanceGenreRecord, GenreRecord> PERFORMANCE_GENRE__FK_PERFORMANCE_GENRE_GENRE = ForeignKeys0.PERFORMANCE_GENRE__FK_PERFORMANCE_GENRE_GENRE;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<AuthorRecord, Long> IDENTITY_AUTHOR = createIdentity(Author.AUTHOR, Author.AUTHOR.ID);
        public static Identity<GenreRecord, Long> IDENTITY_GENRE = createIdentity(Genre.GENRE, Genre.GENRE.ID);
        public static Identity<GigRecord, Long> IDENTITY_GIG = createIdentity(Gig.GIG, Gig.GIG.ID);
        public static Identity<PerformanceRecord, Long> IDENTITY_PERFORMANCE = createIdentity(Performance.PERFORMANCE, Performance.PERFORMANCE.ID);
        public static Identity<VenueRecord, Long> IDENTITY_VENUE = createIdentity(Venue.VENUE, Venue.VENUE.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<AuthorRecord> PK_AUTHOR = createUniqueKey(Author.AUTHOR, "pk_author", Author.AUTHOR.ID);
        public static final UniqueKey<DatabasechangeloglockRecord> PK_DATABASECHANGELOGLOCK = createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, "pk_databasechangeloglock", Databasechangeloglock.DATABASECHANGELOGLOCK.ID);
        public static final UniqueKey<GenreRecord> PK_GENRE = createUniqueKey(Genre.GENRE, "pk_genre", Genre.GENRE.ID);
        public static final UniqueKey<GigRecord> PK_GIG = createUniqueKey(Gig.GIG, "pk_gig", Gig.GIG.ID);
        public static final UniqueKey<PerformanceRecord> PK_PERFORMANCE = createUniqueKey(Performance.PERFORMANCE, "pk_performance", Performance.PERFORMANCE.ID);
        public static final UniqueKey<PerformanceGenreRecord> PK_PERFORMANCE_GENRE = createUniqueKey(PerformanceGenre.PERFORMANCE_GENRE, "pk_performance_genre", PerformanceGenre.PERFORMANCE_GENRE.PERFORMANCE_ID, PerformanceGenre.PERFORMANCE_GENRE.GENRE_ID);
        public static final UniqueKey<VenueRecord> PK_VENUE = createUniqueKey(Venue.VENUE, "pk_venue", Venue.VENUE.ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<GigRecord, VenueRecord> GIG__FK_GIG_VENUE = createForeignKey(fi.alekster.classical.db.Keys.PK_VENUE, Gig.GIG, "gig__fk_gig_venue", Gig.GIG.VENUE_ID);
        public static final ForeignKey<PerformanceRecord, AuthorRecord> PERFORMANCE__FK_PERFORMANCE_AUTHOR = createForeignKey(fi.alekster.classical.db.Keys.PK_AUTHOR, Performance.PERFORMANCE, "performance__fk_performance_author", Performance.PERFORMANCE.AUTHOR_ID);
        public static final ForeignKey<PerformanceRecord, GigRecord> PERFORMANCE__FK_PERFORMANCE_GIG = createForeignKey(fi.alekster.classical.db.Keys.PK_GIG, Performance.PERFORMANCE, "performance__fk_performance_gig", Performance.PERFORMANCE.GIG_ID);
        public static final ForeignKey<PerformanceGenreRecord, PerformanceRecord> PERFORMANCE_GENRE__FK_PERFORMANCE_GENRE_PERFORMANCE = createForeignKey(fi.alekster.classical.db.Keys.PK_PERFORMANCE, PerformanceGenre.PERFORMANCE_GENRE, "performance_genre__fk_performance_genre_performance", PerformanceGenre.PERFORMANCE_GENRE.PERFORMANCE_ID);
        public static final ForeignKey<PerformanceGenreRecord, GenreRecord> PERFORMANCE_GENRE__FK_PERFORMANCE_GENRE_GENRE = createForeignKey(fi.alekster.classical.db.Keys.PK_GENRE, PerformanceGenre.PERFORMANCE_GENRE, "performance_genre__fk_performance_genre_genre", PerformanceGenre.PERFORMANCE_GENRE.GENRE_ID);
    }
}
